
name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '16 5 * * *'
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.11.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}



- name: Buildah Build Backend
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/buildah-build@d097e2e3d2a45b68a7c09040e3de33427bab66af
  uses: redhat-actions/buildah-build@v2.10
  with:
    # The name (reference) of the image to build
    image: msprg/appbackend
    # The tags of the image to build. For multiple tags, seperate by whitespace. For example, "latest v1".
    tags: # optional, default is latest
    # The labels of the image to build. Seperate by newline. For example, "io.containers.capabilities=sys_admin,mknod".
    labels: # optional
    # The base image to use to create a new container image
    base-image: # optional
    # List of Containerfile paths (eg: ./Containerfile)
    containerfiles: # optional
    # Alias for "containerfiles". "containerfiles" takes precedence if both are set.
    dockerfiles: /DockerFiles/backend/
    # Path of the directory to use as context (default: .)
    context: # optional, default is .
    # List of files/directories to copy inside the base image
    content: # optional
    # The entry point to set for containers based on image
    entrypoint: # optional
    # Set to true to cache intermediate layers during build process
    layers: # optional
    # The port to expose when running containers based on image
    port: # optional
    # The working directory to use within the container
    workdir: # optional
    # List of environment variables to be set when running containers based on image
    envs: # optional
    # List of --build-args to pass to buildah
    build-args: # optional
    # Set to true to build using the OCI image format instead of the Docker image format
    oci: # optional, default is false
    # Label the image with this ARCH, instead of defaulting to the host architecture
    arch: # optional
    # 'Same as input 'arch', use this for multiple architectures. Seperate them by a comma'

    archs: # optional
    # Label the image with this PLATFORM, instead of defaulting to the host platform. Only supported for containerfile builds.

    platform: # optional
    # 'Same as input 'platform', use this for multiple platforms. Seperate them by a comma'

    platforms: # optional
    # Extra args to be passed to buildah bud and buildah from. Separate arguments by newline. Do not use quotes - @actions/exec will do the quoting for you.

    extra-args: # optional
    # Require HTTPS and verify certificates when accessing the registry. Defaults to true.

    tls-verify: # optional, default is true





- name: Push backend To Registry
  # You may pin to the exact commit or the version.
  # uses: redhat-actions/push-to-registry@df878026e36864aa6bf9a5b7afe63637cb88ef8c
  uses: redhat-actions/push-to-registry@v2.6
  with:
    # Name of the image/manifest to push (e.g. username/imagename or imagename)
    image: msprg/appbackend
    # 'The tag or tags of the image/manifest to push. For multiple tags, seperate by whitespace. For example, "latest v1"'

    tags: # optional, default is latest
    # Hostname and optional namespace to push the image to (eg. quay.io/username or quay.io)
    registry: # optional
    # Username to use as credential to authenticate to the registry
    username: # optional
    # Password to use as credential to authenticate to the registry
    password: # optional
    # Verify TLS certificates when contacting the registry
    tls-verify: # optional, default is true
    # After copying the image, write the digest of the resulting image to the file. By default, the filename will be determined from the image and tag. The contents of this file are the digest output.

    digestfile: # optional
    # Extra args to be passed to podman push. Separate arguments by newline. Do not use quotes - @actions/exec will do the quoting for you.

    extra-args: # optional






