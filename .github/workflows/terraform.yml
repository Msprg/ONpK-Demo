# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.

name: "Terraform deploy"

on: workflow_dispatch

#on:
#  #schedule:
#  #  - cron: "*/15 * * * *" # At every 15th minute
#  push:
#    branches:
#      - "master"
#    paths:
#      - appbackend/**

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./TF

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Validate runs checks that verify whether a configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state.
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Install and set-up OpenVPN
      - name: Install and setup OpenVPN
        run: |
          sudo apt update -y
          sudo apt install openvpn -y         
          wget https://ikt.uniza.sk/apps/vpn/vpngw2.uniza.sk.ovpn
          echo "${{ secrets.UNIZA_VPN_UNAME }}" >> secret.txt
          echo "${{ secrets.UNIZA_VPN_PASSPHRASE }}" >> secret.txt
        working-directory: ./

      # Connect to OpenVpn
      - name: Connect to OpenVPN
        timeout-minutes: 1
        run: |
          sudo openvpn --config vpngw2.uniza.sk.ovpn --auth-user-pass secret.txt --daemon
          sleep 15
        working-directory: ./

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false  -var="username=${{ secrets.OPENSTACK_USERNAME }}" -var="tenant_name=${{ secrets.OPENSTACK_TENANT_NAME }}" -var="password=${{ secrets.OPENSTACK_PASSPHRASE }}"

        # Build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var="username=${{ secrets.OPENSTACK_USERNAME }}" -var="tenant_name=${{ secrets.OPENSTACK_TENANT_NAME }}" -var="password=${{ secrets.OPENSTACK_PASSPHRASE }}"
        working-directory: ./TF
